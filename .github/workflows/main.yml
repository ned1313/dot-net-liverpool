# This is a basic workflow to help you get started with Actions

name: validate-code

on: [push, pull_request]

env:
  TF_LOG: INFO

jobs:
  validate:
    defaults:
      run:
        working-directory: ./3-github-actions

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.13.0
        
    - name: terraform-fmt
      id: fmt
      run: terraform fmt
      continue-on-error: true

    # Runs a single command using the runners shell
    - name: terraform-init
      id: init
      env:
        ARM_SAS_TOKEN: ${{ secrets.ARM_SAS_TOKEN }}
        STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
      run: terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT"
    
    - name: terraform-validate
      id: validate
      run: terraform validate -no-color

    - name: terraform-plan
      id: plan
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_SAS_TOKEN: ${{ secrets.ARM_SAS_TOKEN }}
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color

    - name: add-plan-comment
      id: comment
      uses: actions/github-script@v3
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
          <details><summary>Show Plan</summary>
          
          \`\`\`${process.env.PLAN}\`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: terraform-apply
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      id: apply
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_SAS_TOKEN: ${{ secrets.ARM_SAS_TOKEN }}
      run: terraform apply -no-color -auto-approve



